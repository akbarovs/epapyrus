// Generated by CoffeeScript 1.6.2
(function() {
  var Arrow, EndEvent, Scene, Shape, StartEvent, UserTask, XYPoint, loadPaper,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  loadPaper = function() {
    var canvas;

    canvas = document.createElement('canvas');
    document.body.appendChild(canvas);
    paper.setup(canvas);
    return window.$p = paper;
  };

  $(function() {
    var a, b, c, scene, selected, tool;

    loadPaper();
    a = new StartEvent("test", {
      x: 100,
      y: 100
    });
    b = new EndEvent("test2", {
      x: 300,
      y: 100
    });
    c = new UserTask("userTask", {
      x: 200,
      y: 100
    });
    scene = new Scene;
    scene.add(a);
    scene.add(b);
    scene.add(c);
    scene.draw();
    a.from(c);
    c.from(b);
    $p.view.viewSize = new $p.Size(1000, 1000);
    $p.view.draw();
    tool = new $p.Tool();
    selected = void 0;
    tool.onMouseDown = function(event) {
      return selected = event.item;
    };
    return tool.onMouseDrag = function(event) {
      if (selected) {
        selected.position.x += event.delta.x;
        selected.position.y += event.delta.y;
        return selected.editorObj.move(event.delta);
      }
    };
  });

  XYPoint = (function() {
    function XYPoint(x, y) {
      this.x = x;
      this.y = y;
    }

    return XYPoint;

  })();

  Scene = (function() {
    function Scene(objects) {
      this.objects = objects != null ? objects : [];
    }

    Scene.prototype.add = function(object) {
      return this.objects.push(object);
    };

    Scene.prototype.draw = function() {
      var object, _i, _len, _ref, _results;

      _ref = this.objects;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        _results.push(object.draw());
      }
      return _results;
    };

    return Scene;

  })();

  Shape = (function() {
    Shape.prototype.type = void 0;

    Shape.prototype.size = void 0;

    Shape.prototype.fromArrows = void 0;

    Shape.prototype.toArrows = void 0;

    function Shape(id, coord, data) {
      this.id = id;
      this.coord = coord;
      this.data = data != null ? data : {};
      this.fromArrows = [];
      this.toArrows = [];
      this.size = {};
    }

    Shape.prototype.draw = function() {
      throw new Error("Unsupported");
    };

    Shape.prototype.center = function() {
      return this.coord;
    };

    Shape.prototype.from = function(shape) {
      var arrow;

      arrow = new Arrow("", this.center(), shape.center());
      this.fromArrows.push(arrow);
      return shape.toArrows.push(arrow);
    };

    Shape.prototype.move = function(pos) {
      var arrow, _i, _j, _len, _len1, _ref, _ref1, _results;

      _ref = this.fromArrows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arrow = _ref[_i];
        arrow.path.firstSegment.point.x += pos.x;
        arrow.path.firstSegment.point.y += pos.y;
      }
      _ref1 = this.toArrows;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        arrow = _ref1[_j];
        arrow.path.lastSegment.point.x += pos.x;
        _results.push(arrow.path.lastSegment.point.y += pos.y);
      }
      return _results;
    };

    return Shape;

  })();

  StartEvent = (function(_super) {
    __extends(StartEvent, _super);

    function StartEvent(id, coord, data) {
      this.id = id;
      this.coord = coord;
      this.data = data != null ? data : {};
      StartEvent.__super__.constructor.call(this, this.id, this.coord, this.data);
      this.type = 'start-event';
      this.size.r = 15;
    }

    StartEvent.prototype.draw = function() {
      var path;

      path = new $p.Path.Circle(new $p.Point(this.coord.x, this.coord.y), this.size.r);
      path.fillColor = 'black';
      return path.editorObj = this;
    };

    return StartEvent;

  })(Shape);

  EndEvent = (function(_super) {
    __extends(EndEvent, _super);

    function EndEvent(id, coord, data) {
      this.id = id;
      this.coord = coord;
      this.data = data != null ? data : {};
      EndEvent.__super__.constructor.call(this, this.id, this.coord, this.data);
      this.type = 'end-event';
      this.size.r = 15;
    }

    EndEvent.prototype.draw = function() {
      var path;

      path = new $p.Path.Circle(new $p.Point(this.coord.x, this.coord.y), this.size.r);
      path.fillColor = 'white';
      path.strokeColor = 'black';
      return path.editorObj = this;
    };

    return EndEvent;

  })(Shape);

  Arrow = (function() {
    Arrow.prototype.path = void 0;

    function Arrow(id, from, to) {
      this.id = id;
      this.from = from;
      this.to = to;
      this.path = new $p.Path.Line(new $p.Point(this.from.x, this.from.y), new $p.Point(this.to.x, this.to.y));
      this.path.strokeColor = 'black';
    }

    return Arrow;

  })();

  UserTask = (function(_super) {
    __extends(UserTask, _super);

    UserTask.prototype.path = void 0;

    function UserTask(id, coord, data) {
      var path;

      this.id = id;
      this.coord = coord;
      this.data = data != null ? data : {};
      UserTask.__super__.constructor.call(this, this.id, this.coord, this.data);
      path = void 0;
      this.type = 'user-task';
      this.size = {
        x: 80,
        y: 50
      };
    }

    UserTask.prototype.draw = function() {
      var rect;

      rect = new $p.Rectangle(new $p.Point(this.coord.x, this.coord.y), new $p.Size(this.size));
      this.path = new $p.Path.RoundRectangle(rect, new $p.Size(5, 5));
      this.path.strokeColor = 'black';
      this.path.fillColor = 'white';
      return this.path.editorObj = this;
    };

    UserTask.prototype.center = function() {
      return this.path.getPointAt(this.path.length / 15);
    };

    return UserTask;

  })(Shape);

}).call(this);
